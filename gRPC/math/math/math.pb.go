// Code generated by protoc-gen-go. DO NOT EDIT.
// source: math/math.proto

package math

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Dividend             int64    `protobuf:"varint,1,opt,name=dividend" json:"dividend,omitempty"`
	Divisor              int64    `protobuf:"varint,2,opt,name=divisor" json:"divisor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_math_13006d44624f5646, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetDividend() int64 {
	if m != nil {
		return m.Dividend
	}
	return 0
}

func (m *Request) GetDivisor() int64 {
	if m != nil {
		return m.Divisor
	}
	return 0
}

type Response struct {
	Quotient             int64    `protobuf:"varint,1,opt,name=quotient" json:"quotient,omitempty"`
	Remainder            int64    `protobuf:"varint,2,opt,name=remainder" json:"remainder,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_math_13006d44624f5646, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetQuotient() int64 {
	if m != nil {
		return m.Quotient
	}
	return 0
}

func (m *Response) GetRemainder() int64 {
	if m != nil {
		return m.Remainder
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "math.Request")
	proto.RegisterType((*Response)(nil), "math.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MathClient is the client API for Math service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MathClient interface {
	Div(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type mathClient struct {
	cc *grpc.ClientConn
}

func NewMathClient(cc *grpc.ClientConn) MathClient {
	return &mathClient{cc}
}

func (c *mathClient) Div(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/math.Math/Div", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MathServer is the server API for Math service.
type MathServer interface {
	Div(context.Context, *Request) (*Response, error)
}

func RegisterMathServer(s *grpc.Server, srv MathServer) {
	s.RegisterService(&_Math_serviceDesc, srv)
}

func _Math_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MathServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/math.Math/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MathServer).Div(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Math_serviceDesc = grpc.ServiceDesc{
	ServiceName: "math.Math",
	HandlerType: (*MathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Div",
			Handler:    _Math_Div_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "math/math.proto",
}

func init() { proto.RegisterFile("math/math.proto", fileDescriptor_math_13006d44624f5646) }

var fileDescriptor_math_13006d44624f5646 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4d, 0x2c, 0xc9,
	0xd0, 0x07, 0x11, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x2c, 0x20, 0xb6, 0x92, 0x3d, 0x17,
	0x7b, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x14, 0x17, 0x47, 0x4a, 0x66, 0x59, 0x66,
	0x4a, 0x6a, 0x5e, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x73, 0x10, 0x9c, 0x2f, 0x24, 0xc1, 0xc5,
	0x0e, 0x62, 0x17, 0xe7, 0x17, 0x49, 0x30, 0x81, 0xa5, 0x60, 0x5c, 0x25, 0x17, 0x2e, 0x8e, 0xa0,
	0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x90, 0x09, 0x85, 0xa5, 0xf9, 0x25, 0x99, 0xa9, 0x79,
	0x25, 0x30, 0x13, 0x60, 0x7c, 0x21, 0x19, 0x2e, 0xce, 0xa2, 0xd4, 0xdc, 0xc4, 0xcc, 0xbc, 0x94,
	0x54, 0x98, 0x19, 0x08, 0x01, 0x23, 0x3d, 0x2e, 0x16, 0xdf, 0xc4, 0x92, 0x0c, 0x21, 0x35, 0x2e,
	0x66, 0x97, 0xcc, 0x32, 0x21, 0x5e, 0x3d, 0xb0, 0x43, 0xa1, 0x2e, 0x93, 0xe2, 0x83, 0x71, 0x21,
	0xf6, 0x28, 0x31, 0x24, 0xb1, 0x81, 0xfd, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc2, 0x80,
	0xa2, 0x17, 0xd6, 0x00, 0x00, 0x00,
}
